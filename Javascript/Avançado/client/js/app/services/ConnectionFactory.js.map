{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoincrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,S;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAEb,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAe;AACXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AACH,6BAXD;;AAaAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BALD;AAMH,yBA3BM,CAAP;AA4BH;;;kDAEoBtB,U,EAAW;;AAE5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACnD,yBAFD;;AAIA1B,mCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH;;;sDAEuB;;AAEpB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 2;\nconst dbName = 'JSFrame';\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory{\n\nconstructor(){\n    throw new Error('Não é possível instanciar esta classe!');\n}\n\nstatic getConnection(){\n\n    return new Promise((resolve, reject) => {\n        let openRequest = window.indexedDB.open(dbName, version);\n\n        openRequest.onupgradeneeded = e => {\n\n            ConnectionFactory._createStore(e.target.result);\n        };\n\n        openRequest.onsuccess = e => {\n            \n            if(!connection){\n                connection = e.target.result;\n                close = connection.close.bind(connection);\n                connection.close = function() {\n                    throw new Error('Você não pode fechar diretamente a conexão!');\n                };\n            }\n\n            resolve(connection);\n        };\n\n        openRequest.onerror = e => {\n            \n            console.log(e.target.error);\n                            \n            reject(e.target.error.name);\n        };\n    });\n}\n\nstatic _createStores(connection){\n\n    stores.forEach(store => {\n        if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n    })\n\n    connection.createObjectStore(store, { autoincrement: true});\n}\n\nstatic closeConnection(){\n    \n    if(connection){\n        close();\n        connection = null;\n    }\n}\n}"]}